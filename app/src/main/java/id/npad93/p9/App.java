/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package id.npad93.p9;

import java.io.IOException;
import java.util.HashMap;
import java.util.Random;

import javafx.application.Application;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Orientation;
import javafx.geometry.Pos;
import javafx.geometry.VPos;
import javafx.scene.Scene;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.TilePane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class App extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        BorderPane borderPane = createBorderPane();
        StackPane stackPane = createStackPane();
        AnchorPane anchorPane = createAnchorPane();
        TilePane tilePane = createTilePane();
        GridPane gridPane = createGridPane();
        FlowPane flowPane = createFlowPane();
        Pane mainPane = createMain();

        
        HashMap<KeyCode, Pane> targetPane = new HashMap<>();
        targetPane.put(KeyCode.DIGIT0, mainPane);
        targetPane.put(KeyCode.DIGIT1, borderPane);
        targetPane.put(KeyCode.DIGIT2, stackPane);
        targetPane.put(KeyCode.DIGIT3, anchorPane);
        targetPane.put(KeyCode.DIGIT4, tilePane);
        targetPane.put(KeyCode.DIGIT5, gridPane);
        targetPane.put(KeyCode.DIGIT6, flowPane);

        Scene scene = new Scene(mainPane);
        scene.addEventFilter(KeyEvent.KEY_PRESSED, (ke) -> {
            if (targetPane.get(ke.getCode()) != null) {
                ke.consume();
            }
        });
        scene.addEventFilter(KeyEvent.KEY_RELEASED, (ke) -> {
            Pane target = targetPane.get(ke.getCode());

            if (target != null) {
                scene.setRoot(target);
            }
        });


        primaryStage.setWidth(800);
        primaryStage.setHeight(600);
        primaryStage.setTitle("Jenis-Jenis Pane Akatsuki");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    static BorderPane createBorderPane() {
        BorderPane result = new BorderPane();
        result.setTop(createTextInCenter("Top Content"));
        result.setLeft(createTextInCenter("Left Content"));
        result.setRight(createTextInCenter("Right Content"));
        result.setBottom(createTextInCenter("Bottom Content"));
        result.setCenter(createTextInCenter("Center Content\nBorderPane"));
        return result;
    }

    static StackPane createStackPane() {
        StackPane result = new StackPane();
        Text t1 = new Text("Loid Forger\nYor Forger");
        t1.setFill(getRandomBackgroundColor());
        t1.setFont(defaultFont);
        Text t2 = new Text("Anya Forger");
        t2.setFill(getRandomBackgroundColor());
        t2.setFont(defaultFont);
        Text t3 = new Text("Ksabar");
        t3.setFill(getRandomBackgroundColor());
        t3.setFont(defaultFont);

        result.getChildren().addAll(t1, t3, t2);
        return result;
    }

    static AnchorPane createAnchorPane() {
        AnchorPane result = new AnchorPane();

        StackPane rect1 = createTextInCenter("Top Left\n200x200+0+0");
        rect1.setPrefSize(150, 150);
        AnchorPane.setTopAnchor(rect1, 0.0);
        AnchorPane.setLeftAnchor(rect1, 0.0);

        StackPane rect2 = createTextInCenter("Bottom Right\n300x300-20-20");
        rect2.setPrefSize(200, 200);
        AnchorPane.setBottomAnchor(rect2, 20.0);
        AnchorPane.setRightAnchor(rect2, 20.0);

        StackPane rect3 = createTextInCenter("Unknown Size\nAi Hoshino");
        AnchorPane.setTopAnchor(rect3, 150.0);
        AnchorPane.setLeftAnchor(rect3, 150.0);
        AnchorPane.setBottomAnchor(rect3, 150.0);
        AnchorPane.setRightAnchor(rect3, 150.0);

        result.getChildren().addAll(rect1, rect2, rect3);
        return result;
    }

    static TilePane createTilePane() {
        TilePane result = new TilePane();
        result.setPrefTileWidth(96);
        result.setPrefTileHeight(96);
        result.setHgap(4.0);
        result.setVgap(4.0);
        result.setTileAlignment(Pos.CENTER);
        result.setOrientation(Orientation.HORIZONTAL);
        result.setPrefRows(5);

        for (int i = 1; i <= 20; i++) {
            StackPane tile = createTextInCenter("Tile #" + i);
            result.getChildren().add(tile);
        }

        return result;
    }

    static GridPane createGridPane() {
        GridPane result = new GridPane();
        result.setVgap(4);
        result.setHgap(4);
        result.setAlignment(Pos.TOP_LEFT);
        result.setGridLinesVisible(true);

        for (int i = 0; i < 14; i++) {
            int x = i % 4;
            int y = i / 4;
            String text = String.format("Grid\n(%d, %d)", x, y);
            int width = rng.nextBoolean() ? 160 : 100;
            int height = rng.nextBoolean() ? 128 : 96;

            StackPane gridNode = createTextInCenter(text);
            gridNode.setMinSize(width, height);
            gridNode.setMaxSize(width, height);
            gridNode.setPrefSize(width, height);
            GridPane.setHalignment(gridNode, HPos.CENTER);
            GridPane.setValignment(gridNode, VPos.CENTER);
            result.add(gridNode, x, y);
        }

        return result;
    }

    static Pane createMain() {
        Font titleFont = defaultFont;
        try {
            titleFont = Font.loadFont(App.class.getResource("/ja-jp.ttf").openStream(), 32);
        } catch (IOException e) {
        }
        Text title = new Text("Pane Akatsuki");
        title.setFont(titleFont);

        StackPane borderPane = createTextInCenter("1. BorderPane");
        borderPane.setPrefSize(200, 36);
        borderPane.setMaxSize(200, 36);
        StackPane stackPane = createTextInCenter("2. StackPane");
        stackPane.setPrefSize(200, 36);
        stackPane.setMaxSize(200, 36);
        StackPane anchorPane = createTextInCenter("3. AnchorPane");
        anchorPane.setPrefSize(200, 36);
        anchorPane.setMaxSize(200, 36);
        StackPane tilePane = createTextInCenter("4. TilePane");
        tilePane.setPrefSize(200, 36);
        tilePane.setMaxSize(200, 36);
        StackPane gridPane = createTextInCenter("5. GridPane");
        gridPane.setPrefSize(200, 36);
        gridPane.setMaxSize(200, 36);
        StackPane flowPane = createTextInCenter("6. FlowPane");
        flowPane.setPrefSize(200, 36);
        flowPane.setMaxSize(200, 36);
        StackPane defaultPane = createTextInCenter("0. this");
        defaultPane.setPrefSize(200, 36);
        defaultPane.setMaxSize(200, 36);
        VBox vBox = new VBox(title, borderPane, stackPane, anchorPane, tilePane, gridPane, flowPane, defaultPane);
        vBox.setPadding(new Insets(20, 0, 0, 20));

        return vBox;
    }

    static FlowPane createFlowPane() {
        FlowPane result = new FlowPane();
        result.setHgap(4);
        result.setVgap(4);

        for (int i = 1; i <= 20; i++) {
            StackPane tile = createTextInCenter("Tile #" + i);
            int width = rng.nextBoolean() ? 160 : 96;
            tile.setPrefSize(width, 80);
            result.getChildren().add(tile);
        }

        return result;
    }

    static StackPane createTextInCenter(String text) {
        StackPane result = new StackPane();
        Color background = getRandomBackgroundColor();
        Color foreground = getTextColorByBackground(background);
        Text t = new Text(text);

        t.setFill(foreground);
        t.setFont(defaultFont);
        result.setBackground(wrapColorAsBackground(background));
        result.getChildren().add(t);
        return result;
    }

    static Color getRandomBackgroundColor() {
        int r = rng.nextInt(256);
        int g = rng.nextInt(256);
        int b = rng.nextInt(256);
        return Color.rgb(r, g, b);
    }

    static Color getTextColorByBackground(Color background) {
        return background.getBrightness() >= 0.5 ? Color.rgb(0, 0, 0) : Color.rgb(255, 255, 255);
    }

    static Background wrapColorAsBackground(Color color) {
        return new Background(new BackgroundFill(color, CornerRadii.EMPTY, Insets.EMPTY));
    }

    static Font defaultFont;
    static Random rng = new Random(("Nahida").hashCode());

    static {
        try {
            defaultFont = Font.loadFont(App.class.getResource("/ja-jp.ttf").openStream(), 16);
        } catch (IOException e) {
            assert false;
        }
    }
}
